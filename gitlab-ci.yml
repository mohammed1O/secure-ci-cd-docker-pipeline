
image: docker:latest
services:
  - docker:dind
variables:
  DOCKER_HOST: "tcp://docker:2375/"
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
stages:
  - build_push           # Build and push Docker images
  - vulnerability_scan   # Scan images for vulnerabilities
  - test                 # Run tests and check code quality
  - pre_deploy           # Deploy to pre-production environment
  - prod_deploy          # Deploy to production environment
build_push:
  stage: build_push
  only:
    - main
    - master
  script:
    - echo "==> Log in to the Docker registry ..."  
    - echo "$CI_REGISTRY_PASSWORD" | docker login "$CI_REGISTRY" -u "$CI_REGISTRY_USER" --password-stdin
    - echo "==> Build and push Docker images..."       # Build and push all required Docker images
    - docker build -t "$CI_REGISTRY_IMAGE/app_core:latest" ./app_CoreApp
    - docker push "$CI_REGISTRY_IMAGE/app_core:latest"
    - docker build -t "$CI_REGISTRY_IMAGE/app_apache:latest" ./app_apache
    - docker push "$CI_REGISTRY_IMAGE/app_apache:latest"
    - docker build -t "$CI_REGISTRY_IMAGE/nginx_reverse:latest" ./nginx
    - docker push "$CI_REGISTRY_IMAGE/nginx_reverse:latest"
    - docker build -t "$CI_REGISTRY_IMAGE/app_redis_srv1:latest" ./app_redis_srv1
    - docker push "$CI_REGISTRY_IMAGE/app_redis_srv1:latest"
    - docker build -t "$CI_REGISTRY_IMAGE/basic_web:latest" ./basic_web
    - docker push "$CI_REGISTRY_IMAGE/basic_web:latest"
    - docker build -t "$CI_REGISTRY_IMAGE/basic_nfs:latest" ./basic_NFS
    - docker push "$CI_REGISTRY_IMAGE/basic_nfs:latest"

#  only starts when the job in  build stage completes successfully.
# Create  Scanning jobs for each image
# app_core image
image_scanning_app_core:
  stage: vulnerability_scan
  image: registry.gitlab.com/security-products/container-scanning:7
  variables:
    CS_IMAGE: "$CI_REGISTRY_IMAGE/app_core:latest"  # Define the image to be scanned
    CS_DOCKERFILE_PATH: "app_CoreApp/Dockerfile"  # Specify the Dockerfile path
  script:
    - gtcs scan   # Run the vulnerability scan
  artifacts:
    paths:
      - gl-container-scanning-report.json   # Save the scanning report
    reports:
      container_scanning: gl-container-scanning-report.json
    expire_in: 5 months    # Keep reports for 5 months
    
        # Similar scanning jobs for other images are defined below.

 # app_apache image
iamge_scanning_app_apache:
  stage: vulnerability_scan
  image: registry.gitlab.com/security-products/container-scanning:7
  variables:
    CS_IMAGE: "$CI_REGISTRY_IMAGE/app_apache:latest"
    CS_DOCKERFILE_PATH: "app_apache/Dockerfile"    # Specify the Dockerfile path
  script:
    - gtcs scan
  artifacts:
    paths:
      - gl-container-scanning-report.json
    reports:
      container_scanning: gl-container-scanning-report.json
    expire_in: 5 months
  # nginx_reverse image  
image_scanning_nginx_reverse:
  stage: vulnerability_scan
  image: registry.gitlab.com/security-products/container-scanning:7
  variables:
    CS_IMAGE: "$CI_REGISTRY_IMAGE/nginx_reverse:latest"
    CS_DOCKERFILE_PATH: "nginx/Dockerfile"   # Specify the Dockerfile path
  script:
    - gtcs scan
  artifacts:
    paths:
      - gl-container-scanning-report.json
    reports:
      container_scanning: gl-container-scanning-report.json
    expire_in: 5 months
  # app_redis image 
image_scanning_app_redis_srv1:
  stage: vulnerability_scan
  image: registry.gitlab.com/security-products/container-scanning:7
  variables:
    CS_IMAGE: "$CI_REGISTRY_IMAGE/app_redis_srv1:latest"
    CS_DOCKERFILE_PATH: "app_redis_srv1/Dockerfile"   # Specify the Dockerfile path
  script:
    - gtcs scan
  artifacts:
    paths:
      - gl-container-scanning-report.json
    reports:
      container_scanning: gl-container-scanning-report.json
    expire_in: 5 months
  # basic_web image
image_scanning_basic_web:
  stage: vulnerability_scan
  image: registry.gitlab.com/security-products/container-scanning:7
  variables:
    CS_IMAGE: "$CI_REGISTRY_IMAGE/basic_web:latest"
    CS_DOCKERFILE_PATH: "basic_web/Dockerfile"      # Specify the Dockerfile path
  script:
    - gtcs scan
  artifacts:
    paths:
      - gl-container-scanning-report.json
    reports:
      container_scanning: gl-container-scanning-report.json
    expire_in: 5 months
  # basic_nfs iamge
image_scanning_basic_nfs:
  stage: vulnerability_scan
  image: registry.gitlab.com/security-products/container-scanning:7
  variables:
    CS_IMAGE: "$CI_REGISTRY_IMAGE/basic_nfs:latest"
    CS_DOCKERFILE_PATH: "basic_NFS/Dockerfile"    # Specify the Dockerfile path
  script:
    - gtcs scan
  artifacts:
    paths:
      - gl-container-scanning-report.json
    reports:
      container_scanning: gl-container-scanning-report.json
    expire_in: 5 months
  
  # check code style , code complex with report and check resources are ready
_style_complexity_Reports_CURLtests:
  stage: test
  only:
    - main
    - master
  image: python:3.11-alpine
  services:
    - docker:dind
  variables:
    DOCKER_HOST: "tcp://docker:2375/"
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  cache:
    paths:
      - .cache/pip
  before_script:
    - echo "==> Preparing for test environment..."
    - apk add --no-cache python3 py3-pip py3-flake8 docker docker-compose curl
    - python3 -m venv venv    # Create a Python virtual environment
    - source venv/bin/activate
    - pip install --upgrade pip
    - pip install --no-cache-dir flake8 radon
  script:
    - source venv/bin/activate
    # style check with report
    - echo "==> Running Flake8..."  # Check code style
    - mkdir -p reports
    - flake8 app_CoreApp/ > reports/flake8-report.txt || true
    # complexity check with report 
    - echo "==> Check code complexity using radon..."
    - radon cc app_CoreApp/website/ -a > reports/radon-report.txt || true
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
    #Service Readiness and Resource Availability Testing
    - docker-compose up --detach
    - docker-compose ps 
    - |
      echo "==> Waiting for the service to be available...."
      for i in {1..30}; do
        if docker-compose exec -T basic_nginx_apache curl --silent --fail http://localhost:80 -o /dev/null; then
          echo "==> Service is available."
          break
        else
          echo "==> waiting... ($i)"
          sleep 1
        fi
        if [ $i -eq 30 ]; then
          echo "==> Failed to access service after 30 seconds."
          docker-compose logs basic_nginx_apache
          exit 1
        fi
      done
    - docker-compose exec -T basic_nginx_apache curl --silent --fail http://localhost:80 -o /dev/null || exit 1
    - docker-compose exec -T basic_nginx_apache curl --silent --fail http://localhost:80/images/movies1.jpg -o /dev/null || exit 1
    - docker run --network host curlimages/curl:latest curl --silent --fail http://localhost:8080 -o /dev/null || exit 1
    - docker run --network host curlimages/curl:latest curl --silent --fail http://localhost:8080/images/movies1.jpg -o /dev/null || exit 1
    - docker-compose kill || true
    - docker-compose down --timeout 30 || true
  artifacts:
    paths:
      - reports/flake8-report.txt  # Style check report
      - reports/radon-report.txt   # Complexity check report
    when: always
    expire_in: 5 months
deploy_preproduction:
  stage: pre_deploy
  only:
    
    - main
    - master
    - tags
  image: alpine:latest
  script:
    - apk add --no-cache git
    - git config --global user.email "mohammed.alaaraji@estudiantat.upc.edu"
    - git config --global user.name "alaaraji1"
    - git clone https://****************************@glpat-xMrp3wtyHCPskQAXJgPr@gitlab.com/meritupc/preprod-group-h.git
    - cd preprod-group-h
    - 'echo "Deployed Tag: $CI_COMMIT_TAG" > preprod-deployment.txt' # Record deployed tag
    - git add preprod-deployment.txt
    - git commit -m "Add Tag $CI_COMMIT_TAG for Pre-Prod Deployment"
    - git push origin main

deploy_production:
  stage: prod_deploy
  when: manual  # Manual deployment to production
  only:
    - main
    - master
    - tags
  image: alpine:latest
  script:
    # Install curl & jq
    - apk add --no-cache curl jq
    #     # Create a production release

    - |
      curl --request POST \
           --header "PRIVATE-TOKEN: glpat-xMrp3wtyHCPskQAXJgPr" \
           --data "name=Release $CI_COMMIT_TAG" \
           --data "tag_name=$CI_COMMIT_TAG" \
           --data "ref=$CI_COMMIT_TAG" \
           --data "description=Production Release for $CI_COMMIT_TAG" \
           "https://gitlab.com/api/v4/projects/65653547/releases"
